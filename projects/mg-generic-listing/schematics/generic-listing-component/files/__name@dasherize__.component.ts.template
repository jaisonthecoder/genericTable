import { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { Router } from '@angular/router';
import { GenericListingTableService, InlineFilterComponent, MgGenericListingTableComponent, advanceSearchResult, gridConfigObj, manifestMetaObject } from '@pcs/generic-listing';
import { environment } from 'environments/environment';
import _ from 'lodash';
import { Subscription } from 'rxjs';

import { InlineFilterService } from './services/inline-filter.service';
import { RequestService } from './services/request.service';
import { ResponseMaperService } from './helper/response-maper.service';
import { TableColumns } from './models/<%= dasherize(name) %>.model';
import { StatusText } from './helper/status-mapper';
import { RequestStatus } from './helper/RequestStatus';
import { FuseConfirmationService } from '@fuse/services/confirmation';
import { TranslocoService } from '@ngneat/transloco';

@Component({
  selector: 'app-<%= dasherize(name) %>',
  templateUrl: './<%= dasherize(name) %>.component.html',
  styleUrls: ['./<%= dasherize(name) %>.component.scss']
})
export class <%= classify(name) %>Component implements OnInit {
  @ViewChild('genericTable') genericTable: MgGenericListingTableComponent;
  @ViewChild('inlineFilter') inlineFilter: InlineFilterComponent;

showTable = true;
  reqStatus = RequestStatus;
  sourceData: any[] = [];
  dataSource_ : any;
  columnDefinition = TableColumns;
  gridConfig: gridConfigObj = {
    gridId: '<%= dasherize(name) %>_landingGrid',
    tableColumns: _.filter(this.columnDefinition, { show: true, isDefault: true }),
    columnDefinition: this.columnDefinition,
    dataList: [],
    dataSource: [],
    multiSelect: true,
    pageSize: '10',
    pageIndex: '1',
    totalCount: 0,
    itemperpageList: ['5', '10', '20'],
    tableMetaObject: manifestMetaObject,
    manifestMetaObject: manifestMetaObject,
    selectedItem: null,
    selectedList: [],
    validations: null,
    height:'100%',
    sortData: null,
    filterValue: {},
    showPagination: true,
    enableCardView: true,
    mergePayload:true
  };
  subscriptions: Subscription[] = [];
  slectedItem = null;
  pagination = {
    pageSize:5,
    pageIndex:1
  }
  filterSourceData = [];
lang = 'en-US';
tblView = true;
  constructor(private cdr: ChangeDetectorRef,
    private tblService: GenericListingTableService,
    private router: Router,
    private requestService: RequestService,
    private responseMaper: ResponseMaperService,
    public inlineFilterService: InlineFilterService,
    private _StatusText: StatusText,
    private _fuseConfirmationService: FuseConfirmationService,
    private _transLocoService: TranslocoService
      ) { }


  ngOnInit(): void {
       this._transLocoService.langChanges$.subscribe((lang)=>{
      this.lang =lang;
      let translations = {};
       if(this.genericTable){
          let translations  = this._transLocoService.getTranslation(this.lang);
        this.genericTable.detectLanguageChanges(this.lang, translations);
      }
      this.cdr.detectChanges();
    });
    }

  ngAfterViewInit() {
    this.tblService.customizedTableConfig$.subscribe(() => {
      let savedGridConFig = this.tblService.getCustomizedTableColumns(this.gridConfig);
      if (savedGridConFig) {
        this.gridConfig = savedGridConFig;
        this.genericTable.applyGridConfig(this.gridConfig);
        this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);
      }
      else {
       this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);
      }
    });
   if(this.genericTable){
           let translations  = this._transLocoService.getTranslation(this.lang);
        this.genericTable.detectLanguageChanges(this.lang, translations);
      }
  }

  ngOnDestroy() {
    this.subscriptions.forEach((sub) => { sub.unsubscribe(); });
  }

  getImgPath(imgName: string) {
    return environment.appUrl + "assets/img/" + imgName;
  }

  goToLanding() {
    this.router.navigate(["/appoinment"]);
  }



  getGridData(_gridConfig: any) {
    this.gridConfig = _gridConfig;
    this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);
  }

  customizTable(event:any) {
    this.genericTable.customizeTable();
    // this.tblService.toggleCustomizeTable(this.gridConfig);
  }

  onSelectItem(item: any) {
    if (item && !_.isEmpty(item) && item?.gridid == this.gridConfig?.gridId) {
      this.slectedItem = item;
    }
  }


  onUnSelectItem(item: any) {
    if (item && !_.isEmpty(item) && item.gridid == this.gridConfig.gridId) {
      this.slectedItem = item;
    }
  }


  getRequestList(sortData?: any, filterValue?: {}) {
 
    let payload: any = { active: true };
    if (filterValue && !_.isEmpty(filterValue) ) {
      payload = filterValue;
    }
    else if(this.gridConfig.filterValue && !_.isEmpty(this.gridConfig.filterValue) ){
      payload = this.gridConfig.filterValue;
    }

   
    let payloadPagination = {
      order: {},
      pagination: { pageSize: this.gridConfig.pageSize, pageIndex: this.gridConfig.pageIndex },
    };

    let sortOrder: any;
    if (sortData === undefined || sortData === null || sortData.length === 0) {
      sortOrder = { "updatedDate.0": -1 };
    }
    else if (sortData.Payload) {
      sortOrder = sortData.Payload;
    }



    this.requestService
      .getRequestLists(payload, payloadPagination, sortOrder)
      .pipe()
      .subscribe({
        next: (response) => {
          this.sourceData = response?.data?.data?.map((d: any) => {
            return <any>this.responseMaper.RequestListMapper(d);
          });

          this.dataSource_ = new MatTableDataSource(this.sourceData);

          this.gridConfig.totalCount = response?.data?.totalItemCount;
          this.gridConfig.pageIndex = response?.data?.pageIndex;
          this.gridConfig.pageSize = response?.data?.pageSize;

          this.gridConfig.dataList = this.dataSource_.data;
          this.genericTable.applyGridConfig(this.gridConfig);
        },
      });
  }



  onGridPageChanges(event: any) {
    this.gridConfig.pageSize = event.pageSize;
    this.gridConfig.pageIndex = event.pageIndex;
    this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);

  }

  onSortOrderChange(event: any) {
    this.gridConfig.sortData = event;
    this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);
  }


  onMenuFilterChanges(event: any): any {
    this.gridConfig.filterValue = event?.filterPayload;
    this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);
  }


  isATAETA(voyage: any) {
    if (voyage.ata !== null && voyage.ata !== "") return true;
    if (voyage.ata == null || voyage.ata === "") return false;
  }



  getStatusText(status) {
    return this._StatusText.getStatusText(status);
  }


  getTextColor(statusCode) {
    return this._StatusText.getStatusTextColor(statusCode);
  }


  afterCustomizeTableFn(event: any) {
    let savedGridConFig = this.tblService.getCustomizedTableColumns(this.gridConfig);
    if (savedGridConFig) {
      this.gridConfig = savedGridConFig;
      this.genericTable.applyGridConfig(this.gridConfig);
     // this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);
    }
  }


  onApplyAdvanceSearch(event: advanceSearchResult) {
        this.gridConfig.pageIndex = 1;
    this.getRequestList(this.gridConfig.sortData, event.filterPayload);
  }

  onApplyGlobalSearch(event: advanceSearchResult) {
        this.gridConfig.pageIndex = 1;
    this.getRequestList(this.gridConfig.sortData, event.filterPayload);
  }


  viewClick(element) {
    if (element.terminalStatus === this.reqStatus.Draft ||
      element.customsStatus === this.reqStatus.Draft) {
      this.router.navigate(["/booking/detail/", element.id]);
    } else {
      this.router.navigate(["/booking/detail/view/", element.id]);
    }

  }


  editClick(element) {
    localStorage.setItem('isValidateUploadManifest', 'true');
    localStorage.setItem('uploadReqStatusManifest','');
    if (element.status === 'Approved') {
      // Open the confirmation dialog
      const confirmation = this._fuseConfirmationService.open({
        title: this._transLocoService.translate("Modify Confirmation", null, this.lang),
        message: "Voyage is already approved. Any changes will send a modified request for approval. Are you sure you want to continue?",
        actions: {
          confirm: {
            label: this._transLocoService.translate("Confirm",null, this.lang),
          },
          cancel: {
            show: false,
          },
          back: {
            show: true,
            label:this._transLocoService.translate( "Back",null, this.lang),
          },
        },
        icon: {
          show: false,
        },
        dismissible: false,
      });
      // Subscribe to the confirmation dialog closed action
      confirmation.afterClosed().subscribe((result) => {
        // If the confirm button pressed...
        if (result === "confirmed") {
          this.router.navigate(["/manifest/manifest-mbl/view/edit", element.manifestRefID, element.id]);
        }
      });

    }
    else {
      this.router.navigate(["/manifest/manifest-mbl/view/edit", element.manifestRefID, element.id]);
    }

  }



  deleteClick(element) {
    // Open the confirmation dialog
    const confirmation = this._fuseConfirmationService.open({
      title: this._transLocoService.translate("Delete Confirmation", null, this.lang),
      message:this._transLocoService.translate( "Are you sure you want to delete this request?", null, this.lang),
      actions: {
        confirm: {
          label: this._transLocoService.translate("Confirm", null, this.lang),
        },
        cancel: {
          show: false,
        },
        back: {
          show: true,
          label: this._transLocoService.translate("Back", null, this.lang),
        },
      },
      icon: {
        show: false,
      },
      dismissible: false,
    });
    // Subscribe to the confirmation dialog closed action
    confirmation.afterClosed().subscribe((result) => {
      // If the confirm button pressed...
      if (result === "confirmed") {
        const requestID = element.id;
        // Delete the Voyage item on the server
        this.requestService.deleteManifestById(requestID).subscribe({
          next: (response: any) => {
            if (response && response?.success) {
              this._snackBarService.openSnackBar(
                this._transLocoService.translate("Manifest has been deleted.", null, this.lang),
                "Delete",
                3000,
                "top",
                "right"
              );

              this.getRequestList(this.gridConfig.sortData, this.gridConfig.filterValue);
            }
          },
          error: (error: any) => {
          },
        });
      }
    });
  }

 isDisableActions(element: any, actionType: any) {
    if (actionType === "modify") {
      if (element.status === this.reqStatus.Pending){return true}
      else {return false};
    }
    if (actionType === "delete") {
      if (element.status === this.reqStatus.Draft){ return false}
      else {return true}
    }
  }




  switchView(event:any) {
    //this.tblView = !this.tblView;
    this.genericTable.switchView();
  }

  onExportData(event:any) {
    alert("Export Data");
  }


 
  clearFilter(config){
    this.gridConfig = config;
    this.showTable = false;
    this.cdr.detectChanges();
    setTimeout(()=>{
      this.showTable = true;
      this.getRequestList();
      this.cdr.detectChanges();
    }, 500);
    //this.genericTable.clearAllFilter();
  }

}


